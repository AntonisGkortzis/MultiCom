/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.awt.Color;
import java.io.IOException;
import java.net.Socket;
import java.util.Date;

import sharedresources.Commands;
import sharedresources.Config;
import sharedresources.Message;
import sharedresources.MessageController;
import sharedresources.Misc;
import sharedresources.OneToManyListener;
/**
 * This class is used to create the Gui of the client and to start communication with the hosts. 
 * The connections started are:
 *  - Client to host communication
 *  - Client to multiple hosts communication
 */
public class Client extends javax.swing.JFrame {
    /**
     * 
     */
    private static final long serialVersionUID = 5095009435533641880L;
    private Socket socketClient;
    private ClientToHost clientToHost;
    public static MessageController messageController = new MessageController();
    
    /**
     * A unique number that will is used as a messages' identifier. 
     */
    private static long messageId;
    
    /**
     * Creates new form ChatClient
     */
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ConnectToServerButton = new javax.swing.JButton();
        UsernameTextField = new javax.swing.JTextField();
//        PortTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        MainPanelTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        EnterTextArea = new javax.swing.JTextArea();
        SendMessageButton = new javax.swing.JButton();
        ServerStatusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Username:");

        jLabel2.setText("Port:");

        ConnectToServerButton.setText("Connect to server");
        ConnectToServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectToServerButtonActionPerformed(evt);
            }
        });

        UsernameTextField.setText("username");

//        PortTextField.setText("4444");

        MainPanelTextArea.setColumns(20);
        MainPanelTextArea.setRows(5);
        jScrollPane1.setViewportView(MainPanelTextArea);

        jLabel3.setText("Enter your text here:");

        EnterTextArea.setColumns(20);
        EnterTextArea.setRows(5);
        jScrollPane2.setViewportView(EnterTextArea);

        SendMessageButton.setText("Send message");
        SendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendMessageButtonActionPerformed(evt);
            }
        });

        ServerStatusLabel.setText("Server status: Not connected");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(UsernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
//                        .addComponent(PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ConnectToServerButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ServerStatusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SendMessageButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(ConnectToServerButton)
                    .addComponent(UsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                    .addComponent(PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SendMessageButton)
                    .addComponent(ServerStatusLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConnectToServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectToServerButtonActionPerformed
    	if(socketClient !=null) {
    		this.showErrorMessage("You are already connected.");
    		return;
    	}
    	
    	//Listen for response of previous request (or should this be placed before clientomhost?
    	OneToManyListener oneToManyListener = new OneToManyListener(messageController, false);
    	oneToManyListener.start();
    	
    	//Multicast to join network
    	ClientToMHost clientToMHost = new ClientToMHost(this);
    	//Send connect request through global multicast
    	clientToMHost.sendConnectRequest();
    	
    	boolean flag = true;
    	long startWaitingForConnection = new Date().getTime();
    	long waitBeforeResendConnectRequest = 5000; //wait this long for resending connection request
    	
    	while(flag) {
    	    long currentTime = new Date().getTime();
    	    //Send a new connection request after some time TODO in report
    	    if(currentTime-startWaitingForConnection>waitBeforeResendConnectRequest) {
    	        clientToMHost.sendConnectRequest();
    	        startWaitingForConnection = new Date().getTime(); //reset the time of the start
    	    }
    		try {
    			/*
    			 * It doesn't receive/pop a connection response without this Thread.sleep
    			 * Probably because this Thread is consuming all processing power
    			 */
				Thread.sleep(500); //TODO Find an explanation for that
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	Message message = messageController.queueMClientCommand.pop();
        	if(message!=null && Commands.messageIsOfCommand(message, Commands.hostFound)) {
                String[] messageParts = Commands.splitMessage(message);
                if(Misc.processID.equals(messageParts[1])) { //This client requested a connection
                    Config.connectToPortFromHost = Integer.parseInt(messageParts[3]);
                    System.out.println("HOST IS FOUND Connect to port: " + Config.connectToPortFromHost);
                    flag=false;
//                    oneToManyListener.stop();
                    break;
                }
        	}
        }
    	
    	MClientListener mClientListener = new MClientListener(this);
    	mClientListener.start();

    	
//    	TODO Use info obtained from clientToMHost/oneToManyListener
    	clientToHost = new ClientToHost(this);
    	socketClient = clientToHost.getSocket();
    	
//    	ReceivedAcknowledgmentsMonitor ackMonitor = new ReceivedAcknowledgmentsMonitor(clientToHost);
//    	ackMonitor.start();
    	
    	sendFirstConnectMessageToHost();
        
    }//GEN-LAST:event_ConnectToServerButtonActionPerformed
 
    /**
     * Used to send the first message to the host, so the host knows 
     * it has a new client and can update its client list
     */
    private void sendFirstConnectMessageToHost() {
        String command = Commands.constructCommand(Commands.initOneToOneWithHost);
        clientToHost.sendMessage(command);
    }
    
    private void SendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendMessageButtonActionPerformed
    	clientToHost.sendMessage(this.EnterTextArea.getText());
    	this.EnterTextArea.setText("");

    }//GEN-LAST:event_SendMessageButtonActionPerformed

	private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO tell the host that you closed?
        try {
        	if(socketClient != null) {
        		// TODO Close everything here!
        		socketClient.close();
        	}
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }
    
    public void closeSocket() {
    	if(socketClient != null) {
    		try {
				socketClient.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
        setServerStatus("Connection failed..", false);

    }
    public String getUserName(){
        return this.UsernameTextField.getText();
    }
    
    public static long getNextMessageId(){
    	return ++messageId;
    }
    
//    /**
//     * @Deprecated
//     * must be replaced by the port number received from the Master Host
//     */
//    @Deprecated
//    public int getPort(){
//        return Integer.parseInt(PortTextField.getText());
//    }
    
    public void setServerStatus(String status, boolean flag){
        this.ServerStatusLabel.setText(status);
        if(flag) 
            this.ServerStatusLabel.setForeground(Color.black);
        else
            this.ServerStatusLabel.setForeground(Color.red);
    }
    
    public void AddTextToMainPanel(String text){
        this.MainPanelTextArea.setText(this.MainPanelTextArea.getText() + text + "\n");
    }
    
    public String getTextFromMainPanel(){
    	return this.MainPanelTextArea.getText();
    }
    
    public void showErrorMessage(String msg) {
    	javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), msg, "Error",
    	        javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectToServerButton;
    private javax.swing.JTextArea EnterTextArea;
    private javax.swing.JTextField UsernameTextField;
    private javax.swing.JTextArea MainPanelTextArea;
//    private javax.swing.JTextField PortTextField;
    private javax.swing.JButton SendMessageButton;
    private javax.swing.JLabel ServerStatusLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
